Index: rpc-core/src/main/java/rpc/transport/NettyResponseFuture.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package rpc.transport;\n\nimport com.demo.rpc.protocol.Message;\nimport io.netty.channel.Channel;\nimport io.netty.util.concurrent.Promise;\n\npublic class NettyResponseFuture<T> {\n    private long createTime;\n    private long timeOut;\n    private Message request;\n    private Channel channel;\n    private Promise<T> promise;\n\n    public NettyResponseFuture(long createTime, long timeOut, Message request, Channel channel, Promise<T> promise) {\n        this.createTime = createTime;\n        this.timeOut = timeOut;\n        this.request = request;\n        this.channel = channel;\n        this.promise = promise;\n    }\n\n    public long getTimeOut() {\n        return timeOut;\n    }\n\n    public void setTimeOut(long timeOut) {\n        this.timeOut = timeOut;\n    }\n\n    public Message getRequest() {\n        return request;\n    }\n\n    public void setRequest(Message request) {\n        this.request = request;\n    }\n\n    public Channel getChannel() {\n        return channel;\n    }\n\n    public void setChannel(Channel channel) {\n        this.channel = channel;\n    }\n\n    public long getCreateTime() {\n        return createTime;\n    }\n\n    public void setCreateTime(long createTime) {\n        this.createTime = createTime;\n    }\n\n    public Promise<T> getPromise() {\n        return promise;\n    }\n\n    public void setPromise(Promise<T> promise) {\n        this.promise = promise;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/rpc-core/src/main/java/rpc/transport/NettyResponseFuture.java b/rpc-core/src/main/java/rpc/transport/NettyResponseFuture.java
--- a/rpc-core/src/main/java/rpc/transport/NettyResponseFuture.java	(revision f1316da354c950b0c2b8726e82f6489e820684a5)
+++ b/rpc-core/src/main/java/rpc/transport/NettyResponseFuture.java	(date 1693811890988)
@@ -1,9 +1,11 @@
 package rpc.transport;
 
-import com.demo.rpc.protocol.Message;
 import io.netty.channel.Channel;
 import io.netty.util.concurrent.Promise;
+import lombok.Builder;
+import rpc.protocol.Message;
 
+@Builder
 public class NettyResponseFuture<T> {
     private long createTime;
     private long timeOut;
Index: rpc-core/src/main/java/rpc/transport/DemoRpcServerHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package rpc.transport;\n\nimport com.demo.rpc.Constants;\nimport com.demo.rpc.protocol.Message;\nimport com.demo.rpc.protocol.Request;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.SimpleChannelInboundHandler;\n\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.Executors;\n\n/**\n * Created on 2020-06-21\n */\npublic class DemoRpcServerHandler extends SimpleChannelInboundHandler<Message<Request>> {\n\n    // 业务线程池\n    private static Executor executor = Executors.newCachedThreadPool();\n\n    @Override\n    protected void channelRead0(final ChannelHandlerContext channelHandlerContext, Message<Request> message) throws Exception {\n        byte extraInfo = message.getHeader().getExtraInfo();\n        if (Constants.isHeartBeat(extraInfo)) { // 心跳消息，直接返回即可\n            channelHandlerContext.writeAndFlush(message);\n            return;\n        }\n        // 非心跳消息，直接封装成Runnable提交到业务线程池\n        executor.execute(new InvokeRunnable(message, channelHandlerContext));\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/rpc-core/src/main/java/rpc/transport/DemoRpcServerHandler.java b/rpc-core/src/main/java/rpc/transport/DemoRpcServerHandler.java
--- a/rpc-core/src/main/java/rpc/transport/DemoRpcServerHandler.java	(revision f1316da354c950b0c2b8726e82f6489e820684a5)
+++ b/rpc-core/src/main/java/rpc/transport/DemoRpcServerHandler.java	(date 1693811891004)
@@ -1,10 +1,10 @@
 package rpc.transport;
 
-import com.demo.rpc.Constants;
-import com.demo.rpc.protocol.Message;
-import com.demo.rpc.protocol.Request;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.SimpleChannelInboundHandler;
+import rpc.Constants;
+import rpc.protocol.Message;
+import rpc.protocol.Request;
 
 import java.util.concurrent.Executor;
 import java.util.concurrent.Executors;
Index: rpc-core/src/main/java/rpc/proxy/DemoRpcProxy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package rpc.proxy;\n\nimport com.demo.rpc.Constants;\nimport com.demo.rpc.protocol.Header;\nimport com.demo.rpc.protocol.Message;\nimport com.demo.rpc.protocol.Request;\nimport com.demo.rpc.registry.Registry;\nimport com.demo.rpc.registry.ServerInfo;\nimport com.demo.rpc.transport.Connection;\nimport com.demo.rpc.transport.DemoRpcClient;\nimport com.demo.rpc.transport.NettyResponseFuture;\nimport io.netty.channel.ChannelFuture;\nimport org.apache.curator.x.discovery.ServiceInstance;\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.TimeUnit;\n\nimport static com.demo.rpc.Constants.MAGIC;\nimport static com.demo.rpc.Constants.VERSION_1;\n\npublic class DemoRpcProxy implements InvocationHandler {\n\n    private String serviceName; // 需要代理的服务(接口)名称\n\n    public Map<Method, Header> headerCache = new ConcurrentHashMap<>();\n\n    // 用于与Zookeeper交互，其中自带缓存\n    private Registry<ServerInfo> registry;\n\n    public DemoRpcProxy(String serviceName,\n                        Registry<ServerInfo> registry) throws Exception {\n        this.serviceName = serviceName;\n        this.registry = registry;\n    }\n\n    public static <T> T newInstance(Class<T> clazz, Registry<ServerInfo> registry) throws Exception {\n        // 创建代理对象\n        return (T) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),\n                new Class[]{clazz},\n                new DemoRpcProxy(\"demoService\", registry));\n    }\n\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        // 从Zookeeper缓存中获取可用的Server地址,并随机从中选择一个\n        List<ServiceInstance<ServerInfo>> serviceInstances =\n                registry.queryForInstances(serviceName);\n        ServiceInstance<ServerInfo> serviceInstance =\n                serviceInstances.get(ThreadLocalRandom.current().nextInt(serviceInstances.size()));\n        // 创建请求消息，然后调用remoteCall()方法请求上面选定的Server端\n        String methodName = method.getName();\n        Header header = headerCache.computeIfAbsent(method, h -> new Header(MAGIC, VERSION_1));\n        Message<Request> message = new Message(header, new Request(serviceName, methodName, args));\n        return remoteCall(serviceInstance.getPayload(), message);\n    }\n\n    protected Object remoteCall(ServerInfo serverInfo, Message message) throws Exception {\n        if (serverInfo == null) {\n            throw new RuntimeException(\"get available server error\");\n        }\n        Object result;\n        try {\n            // 创建DemoRpcClient连接指定的Server端\n            DemoRpcClient demoRpcClient = new DemoRpcClient(serverInfo.getHost(), serverInfo.getPort());\n            ChannelFuture channelFuture = demoRpcClient.connect().awaitUninterruptibly();\n            // 创建对应的Connection对象，并发送请求\n            Connection connection = new Connection(channelFuture, true);\n            NettyResponseFuture responseFuture = connection.request(message, Constants.DEFAULT_TIMEOUT);\n            // 等待请求对应的响应\n            result = responseFuture.getPromise().get(Constants.DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS);\n        } catch (Exception e) {\n            throw e;\n        }\n        return result;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/rpc-core/src/main/java/rpc/proxy/DemoRpcProxy.java b/rpc-core/src/main/java/rpc/proxy/DemoRpcProxy.java
--- a/rpc-core/src/main/java/rpc/proxy/DemoRpcProxy.java	(revision f1316da354c950b0c2b8726e82f6489e820684a5)
+++ b/rpc-core/src/main/java/rpc/proxy/DemoRpcProxy.java	(date 1693811891031)
@@ -1,16 +1,17 @@
 package rpc.proxy;
 
-import com.demo.rpc.Constants;
-import com.demo.rpc.protocol.Header;
-import com.demo.rpc.protocol.Message;
-import com.demo.rpc.protocol.Request;
-import com.demo.rpc.registry.Registry;
-import com.demo.rpc.registry.ServerInfo;
-import com.demo.rpc.transport.Connection;
-import com.demo.rpc.transport.DemoRpcClient;
-import com.demo.rpc.transport.NettyResponseFuture;
+
 import io.netty.channel.ChannelFuture;
 import org.apache.curator.x.discovery.ServiceInstance;
+import rpc.Constants;
+import rpc.protocol.Header;
+import rpc.protocol.Message;
+import rpc.protocol.Request;
+import rpc.registry.Registry;
+import rpc.registry.ServerInfo;
+import rpc.transport.Connection;
+import rpc.transport.DemoRpcClient;
+import rpc.transport.NettyResponseFuture;
 
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Method;
@@ -21,8 +22,9 @@
 import java.util.concurrent.ThreadLocalRandom;
 import java.util.concurrent.TimeUnit;
 
-import static com.demo.rpc.Constants.MAGIC;
-import static com.demo.rpc.Constants.VERSION_1;
+import static rpc.Constants.MAGIC;
+import static rpc.Constants.VERSION_1;
+
 
 public class DemoRpcProxy implements InvocationHandler {
 
Index: rpc-core/src/main/java/rpc/transport/Connection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package rpc.transport;\n\nimport com.demo.rpc.Constants;\nimport com.demo.rpc.protocol.Header;\nimport com.demo.rpc.protocol.Message;\nimport com.demo.rpc.protocol.Request;\nimport com.demo.rpc.protocol.Response;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.DefaultEventLoop;\nimport io.netty.util.concurrent.DefaultPromise;\nimport io.netty.util.concurrent.Promise;\n\nimport java.io.Closeable;\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.concurrent.atomic.AtomicLong;\n\n\npublic class Connection implements Closeable {\n    // 用于生成消息ID，全局唯一\n    private final static AtomicLong ID_GENERATOR = new AtomicLong(0);\n\n    // TODO 时间轮定时删除\n    public final static Map<Long, NettyResponseFuture<Response>> IN_FLIGHT_REQUEST_MAP\n            = new ConcurrentHashMap<>();\n\n    private ChannelFuture future;\n\n    private AtomicBoolean isConnected = new AtomicBoolean();\n\n    public Connection() {\n        this.isConnected.set(false);\n        this.future = null;\n    }\n\n    public Connection(ChannelFuture future, boolean isConnected) {\n        this.future = future;\n        this.isConnected.set(isConnected);\n    }\n\n    public ChannelFuture getFuture() {\n        return future;\n    }\n\n    public void setFuture(ChannelFuture future) {\n        this.future = future;\n    }\n\n    public boolean isConnected() {\n        return isConnected.get();\n    }\n\n    public void setIsConnected(boolean isConnected) {\n        this.isConnected.set(isConnected);\n    }\n\n    public NettyResponseFuture<Response> request(Message<Request> message, long timeOut) {\n        // 生成并设置消息ID\n        long messageId = ID_GENERATOR.incrementAndGet();\n        message.getHeader().setMessageId(messageId);\n        // 创建消息关联的Future\n        NettyResponseFuture responseFuture = new NettyResponseFuture(System.currentTimeMillis(),\n                timeOut, message, future.channel(), new DefaultPromise(new DefaultEventLoop()));\n        // 将消息ID和关联的Future记录到IN_FLIGHT_REQUEST_MAP集合中\n        IN_FLIGHT_REQUEST_MAP.put(messageId, responseFuture);\n        try {\n            future.channel().writeAndFlush(message); // 发送请求\n        } catch (Exception e) {\n            // 发送请求异常时，删除对应的Future\n            IN_FLIGHT_REQUEST_MAP.remove(messageId);\n            throw e;\n        }\n        return responseFuture;\n    }\n\n    public boolean ping() {\n        Header heartBeatHeader = new Header(Constants.MAGIC, Constants.VERSION_1);\n        heartBeatHeader.setExtraInfo(Constants.HEART_EXTRA_INFO);\n        Message message = new Message(heartBeatHeader, null);\n        NettyResponseFuture<Response> request = request(message, Constants.DEFAULT_TIMEOUT);\n        try {\n            Promise<Response> await = request.getPromise().await();\n            return await.get().getCode() == Constants.HEARTBEAT_CODE;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    @Override\n    public void close() throws IOException {\n        future.channel().close();\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/rpc-core/src/main/java/rpc/transport/Connection.java b/rpc-core/src/main/java/rpc/transport/Connection.java
--- a/rpc-core/src/main/java/rpc/transport/Connection.java	(revision f1316da354c950b0c2b8726e82f6489e820684a5)
+++ b/rpc-core/src/main/java/rpc/transport/Connection.java	(date 1693811891045)
@@ -1,14 +1,14 @@
 package rpc.transport;
 
-import com.demo.rpc.Constants;
-import com.demo.rpc.protocol.Header;
-import com.demo.rpc.protocol.Message;
-import com.demo.rpc.protocol.Request;
-import com.demo.rpc.protocol.Response;
 import io.netty.channel.ChannelFuture;
 import io.netty.channel.DefaultEventLoop;
 import io.netty.util.concurrent.DefaultPromise;
 import io.netty.util.concurrent.Promise;
+import rpc.Constants;
+import rpc.protocol.Header;
+import rpc.protocol.Message;
+import rpc.protocol.Request;
+import rpc.protocol.Response;
 
 import java.io.Closeable;
 import java.io.IOException;
Index: rpc-core/src/main/java/rpc/codec/DemoRpcEncoder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package rpc.codec;\n\nimport com.demo.rpc.Constants;\nimport com.demo.rpc.compress.Compressor;\nimport com.demo.rpc.compress.CompressorFactory;\nimport com.demo.rpc.protocol.Header;\nimport com.demo.rpc.protocol.Message;\nimport com.demo.rpc.serialization.Serialization;\nimport com.demo.rpc.serialization.SerializationFactory;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.handler.codec.MessageToByteEncoder;\n\n/**\n * Created on 2020-06-19\n */\npublic class DemoRpcEncoder extends MessageToByteEncoder<Message> {\n\n    @Override\n    protected void encode(ChannelHandlerContext ctx,\n                          Message message, ByteBuf byteBuf) throws Exception {\n        Header header = message.getHeader();\n        // 依次序列化消息头中的魔数、版本、附加信息以及消息ID\n        byteBuf.writeShort(header.getMagic());\n        byteBuf.writeByte(header.getVersion());\n        byteBuf.writeByte(header.getExtraInfo());\n        byteBuf.writeLong(header.getMessageId());\n        Object content = message.getContent();\n        if (Constants.isHeartBeat(header.getExtraInfo())) {\n            byteBuf.writeInt(0); // 心跳消息，没有消息体，这里写入0\n            return;\n        }\n        // 按照extraInfo部分指定的序列化方式和压缩方式进行处理\n        Serialization serialization = SerializationFactory.get(header.getExtraInfo());\n        Compressor compressor = CompressorFactory.get(header.getExtraInfo());\n        byte[] payload = compressor.compress(serialization.serialize(content));\n        byteBuf.writeInt(payload.length); // 写入消息体长度\n        byteBuf.writeBytes(payload); // 写入消息体\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/rpc-core/src/main/java/rpc/codec/DemoRpcEncoder.java b/rpc-core/src/main/java/rpc/codec/DemoRpcEncoder.java
--- a/rpc-core/src/main/java/rpc/codec/DemoRpcEncoder.java	(revision f1316da354c950b0c2b8726e82f6489e820684a5)
+++ b/rpc-core/src/main/java/rpc/codec/DemoRpcEncoder.java	(date 1693811891057)
@@ -1,15 +1,16 @@
 package rpc.codec;
 
-import com.demo.rpc.Constants;
-import com.demo.rpc.compress.Compressor;
-import com.demo.rpc.compress.CompressorFactory;
-import com.demo.rpc.protocol.Header;
-import com.demo.rpc.protocol.Message;
-import com.demo.rpc.serialization.Serialization;
-import com.demo.rpc.serialization.SerializationFactory;
+
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.MessageToByteEncoder;
+import rpc.Constants;
+import rpc.compress.Compressor;
+import rpc.compress.CompressorFactory;
+import rpc.protocol.Header;
+import rpc.protocol.Message;
+import rpc.serialization.Serialization;
+import rpc.serialization.SerializationFactory;
 
 /**
  * Created on 2020-06-19
Index: rpc-core/src/main/java/rpc/transport/DemoRpcClientHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package rpc.transport;\n\nimport com.demo.rpc.Constants;\nimport com.demo.rpc.protocol.Message;\nimport com.demo.rpc.protocol.Response;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.SimpleChannelInboundHandler;\n\npublic class DemoRpcClientHandler extends SimpleChannelInboundHandler<Message<Response>> {\n\n    @Override\n    protected void channelRead0(ChannelHandlerContext channelHandlerContext, Message<Response> message) throws Exception {\n        NettyResponseFuture responseFuture =\n                Connection.IN_FLIGHT_REQUEST_MAP.remove(message.getHeader().getMessageId());\n        Response response = message.getContent();\n        // 心跳消息特殊处理\n        if (response == null && Constants.isHeartBeat(message.getHeader().getExtraInfo())) {\n            response = new Response();\n            response.setCode(Constants.HEARTBEAT_CODE);\n        }\n        responseFuture.getPromise().setSuccess(response.getResult());\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/rpc-core/src/main/java/rpc/transport/DemoRpcClientHandler.java b/rpc-core/src/main/java/rpc/transport/DemoRpcClientHandler.java
--- a/rpc-core/src/main/java/rpc/transport/DemoRpcClientHandler.java	(revision f1316da354c950b0c2b8726e82f6489e820684a5)
+++ b/rpc-core/src/main/java/rpc/transport/DemoRpcClientHandler.java	(date 1693811891069)
@@ -1,10 +1,11 @@
 package rpc.transport;
 
-import com.demo.rpc.Constants;
-import com.demo.rpc.protocol.Message;
-import com.demo.rpc.protocol.Response;
+
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.SimpleChannelInboundHandler;
+import rpc.Constants;
+import rpc.protocol.Message;
+import rpc.protocol.Response;
 
 public class DemoRpcClientHandler extends SimpleChannelInboundHandler<Message<Response>> {
 
@@ -20,4 +21,10 @@
         }
         responseFuture.getPromise().setSuccess(response.getResult());
     }
+
+    @Override
+    public void channelActive(ChannelHandlerContext ctx) throws Exception {
+        System.out.println("client and server connected ");
+        super.channelActive(ctx);
+    }
 }
\ No newline at end of file
Index: rpc-core/src/main/java/rpc/transport/InvokeRunnable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package rpc.transport;\n\nimport com.demo.rpc.factory.BeanManager;\nimport com.demo.rpc.protocol.Header;\nimport com.demo.rpc.protocol.Message;\nimport com.demo.rpc.protocol.Request;\nimport com.demo.rpc.protocol.Response;\nimport io.netty.channel.ChannelHandlerContext;\n\nimport java.lang.reflect.Method;\n\nclass InvokeRunnable implements Runnable {\n\n    private ChannelHandlerContext ctx;\n    private Message<Request> message;\n\n    public InvokeRunnable(Message<Request> message, ChannelHandlerContext ctx) {\n        this.message = message;\n        this.ctx = ctx;\n    }\n\n    @Override\n    public void run() {\n        Response response = new Response();\n        Object result = null;\n        try {\n            Request request = message.getContent();\n            String serviceName = request.getServiceName();\n            // 这里提供BeanManager对所有业务Bean进行管理，其底层在内存中维护了\n            // 一个业务Bean实例的集合。感兴趣的同学可以尝试接入Spring等容器管\n            // 理业务Bean\n            Object bean = BeanManager.getBean(serviceName);\n            // 下面通过反射调用Bean中的相应方法\n            Method method = bean.getClass().getMethod(request.getMethodName(), request.getArgTypes());\n            result = method.invoke(bean, request.getArgs());\n        } catch (Exception e) {\n            // 省略异常处理\n        } finally {\n        }\n        Header header = message.getHeader();\n        header.setExtraInfo((byte) 1);\n        response.setResult(result); // 设置响应结果\n        // 将响应消息返回给客户端\n        ctx.writeAndFlush(new Message(header, response));\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/rpc-core/src/main/java/rpc/transport/InvokeRunnable.java b/rpc-core/src/main/java/rpc/transport/InvokeRunnable.java
--- a/rpc-core/src/main/java/rpc/transport/InvokeRunnable.java	(revision f1316da354c950b0c2b8726e82f6489e820684a5)
+++ b/rpc-core/src/main/java/rpc/transport/InvokeRunnable.java	(date 1693811891080)
@@ -1,11 +1,12 @@
 package rpc.transport;
 
-import com.demo.rpc.factory.BeanManager;
-import com.demo.rpc.protocol.Header;
-import com.demo.rpc.protocol.Message;
-import com.demo.rpc.protocol.Request;
-import com.demo.rpc.protocol.Response;
+
 import io.netty.channel.ChannelHandlerContext;
+import rpc.factory.BeanManager;
+import rpc.protocol.Header;
+import rpc.protocol.Message;
+import rpc.protocol.Request;
+import rpc.protocol.Response;
 
 import java.lang.reflect.Method;
 
Index: rpc-core/src/main/java/rpc/codec/DemoRpcDecoder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package rpc.codec;\n\nimport com.demo.rpc.Constants;\nimport com.demo.rpc.compress.Compressor;\nimport com.demo.rpc.compress.CompressorFactory;\nimport com.demo.rpc.protocol.Header;\nimport com.demo.rpc.protocol.Message;\nimport com.demo.rpc.protocol.Request;\nimport com.demo.rpc.protocol.Response;\nimport com.demo.rpc.serialization.Serialization;\nimport com.demo.rpc.serialization.SerializationFactory;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.handler.codec.ByteToMessageDecoder;\n\nimport java.util.List;\n\npublic class DemoRpcDecoder extends ByteToMessageDecoder {\n\n    protected void decode(ChannelHandlerContext ctx, ByteBuf byteBuf, List<Object> out) throws Exception {\n        if (byteBuf.readableBytes() < Constants.HEADER_SIZE) {\n            return; // 不到16字节的话无法解析消息头，暂不读取\n        }\n        // 记录当前readIndex指针的位置，方便重置\n        byteBuf.markReaderIndex();\n        // 尝试读取消息头的魔数部分\n        short magic = byteBuf.readShort();\n        if (magic != Constants.MAGIC) { // 魔数不匹配会抛出异常\n            byteBuf.resetReaderIndex(); // 重置readIndex指针\n            throw new RuntimeException(\"magic number error:\" + magic);\n        }\n        // 依次读取消息版本、附加信息、消息ID以及消息体长度四部分\n        byte version = byteBuf.readByte();\n        byte extraInfo = byteBuf.readByte();\n        long messageId = byteBuf.readLong();\n        int size = byteBuf.readInt();\n        Object body = null;\n        // 心跳消息是没有消息体的，无需读取\n        if (!Constants.isHeartBeat(extraInfo)) {\n            // 对于非心跳消息，没有积累到足够的数据是无法进行反序列化的\n            if (byteBuf.readableBytes() < size) {\n                byteBuf.resetReaderIndex();\n                return;\n            }\n            // 读取消息体并进行反序列化\n            byte[] payload = new byte[size];\n            byteBuf.readBytes(payload);\n            // 这里根据消息头中的extraInfo部分选择相应的序列化和压缩方式\n            Serialization serialization = SerializationFactory.get(extraInfo);\n            Compressor compressor = CompressorFactory.get(extraInfo);\n            if (Constants.isRequest(extraInfo)) {\n                // 得到消息体\n                body = serialization.deserialize(compressor.unCompress(payload),\n                        Request.class);\n            } else {\n                // 得到消息体\n                body = serialization.deserialize(compressor.unCompress(payload),\n                        Response.class);\n            }\n        }\n        // 将上面读取到的消息头和消息体拼装成完整的Message并向后传递\n        Header header = new Header(magic, version, extraInfo, messageId, size);\n        Message message = new Message(header, body);\n        out.add(message);\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/rpc-core/src/main/java/rpc/codec/DemoRpcDecoder.java b/rpc-core/src/main/java/rpc/codec/DemoRpcDecoder.java
--- a/rpc-core/src/main/java/rpc/codec/DemoRpcDecoder.java	(revision f1316da354c950b0c2b8726e82f6489e820684a5)
+++ b/rpc-core/src/main/java/rpc/codec/DemoRpcDecoder.java	(date 1693811891093)
@@ -1,17 +1,18 @@
 package rpc.codec;
 
-import com.demo.rpc.Constants;
-import com.demo.rpc.compress.Compressor;
-import com.demo.rpc.compress.CompressorFactory;
-import com.demo.rpc.protocol.Header;
-import com.demo.rpc.protocol.Message;
-import com.demo.rpc.protocol.Request;
-import com.demo.rpc.protocol.Response;
-import com.demo.rpc.serialization.Serialization;
-import com.demo.rpc.serialization.SerializationFactory;
+
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.ByteToMessageDecoder;
+import rpc.Constants;
+import rpc.compress.Compressor;
+import rpc.compress.CompressorFactory;
+import rpc.protocol.Header;
+import rpc.protocol.Message;
+import rpc.protocol.Request;
+import rpc.protocol.Response;
+import rpc.serialization.Serialization;
+import rpc.serialization.SerializationFactory;
 
 import java.util.List;
 
Index: rpc-core/src/main/java/rpc/transport/DemoRpcServer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package rpc.transport;\n\nimport com.demo.rpc.codec.DemoRpcDecoder;\nimport com.demo.rpc.codec.DemoRpcEncoder;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.PooledByteBufAllocator;\nimport io.netty.channel.*;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\n\npublic class DemoRpcServer {\n\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private ServerBootstrap serverBootstrap;\n    private Channel channel;\n    protected int port;\n\n    public DemoRpcServer(int port) throws InterruptedException {\n        this.port = port;\n        // 创建boss和worker两个EventLoopGroup，注意一些小细节，\n        // workerGroup 是按照中的线程数是按照 CPU 核数计算得到的\n        bossGroup = NettyEventLoopFactory.eventLoopGroup(1,\n                \"NettyServerBoss\");\n        workerGroup = NettyEventLoopFactory.eventLoopGroup(\n                Math.min(Runtime.getRuntime().availableProcessors() + 1, 32),\n                \"NettyServerWorker\");\n        serverBootstrap = new ServerBootstrap().group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .option(ChannelOption.SO_REUSEADDR, Boolean.TRUE)\n                .childOption(ChannelOption.TCP_NODELAY, Boolean.TRUE)\n                .childOption(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT)\n                // 指定每个Channel上注册的ChannelHandler以及顺序\n                .handler(new LoggingHandler(LogLevel.INFO)).childHandler(\n                        new ChannelInitializer<SocketChannel>() {\n                            @Override\n                            protected void initChannel(SocketChannel ch) throws Exception {\n                                ch.pipeline().addLast(\"demp-rpc-decoder\", new DemoRpcDecoder());\n                                ch.pipeline().addLast(\"demo-rpc-encoder\", new DemoRpcEncoder());\n                                ch.pipeline().addLast(\"server-handler\", new DemoRpcServerHandler());\n                            }\n                        });\n    }\n\n    public ChannelFuture start() throws InterruptedException {\n        // 监听指定的端口\n        ChannelFuture channelFuture = serverBootstrap.bind(port);\n        channel = channelFuture.channel();\n        channel.closeFuture();\n        return channelFuture;\n    }\n\n\n    public void startAndWait() throws InterruptedException {\n        try {\n            channel.closeFuture().await();\n        } catch (InterruptedException e) {\n            Thread.interrupted();\n        }\n    }\n\n\n    public void shutdown() throws InterruptedException {\n        channel.close().sync();\n        if (bossGroup != null)\n            bossGroup.shutdownGracefully().awaitUninterruptibly(15000);\n        if (workerGroup != null)\n            workerGroup.shutdownGracefully().awaitUninterruptibly(15000);\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/rpc-core/src/main/java/rpc/transport/DemoRpcServer.java b/rpc-core/src/main/java/rpc/transport/DemoRpcServer.java
--- a/rpc-core/src/main/java/rpc/transport/DemoRpcServer.java	(revision f1316da354c950b0c2b8726e82f6489e820684a5)
+++ b/rpc-core/src/main/java/rpc/transport/DemoRpcServer.java	(date 1693811891104)
@@ -1,7 +1,5 @@
 package rpc.transport;
 
-import com.demo.rpc.codec.DemoRpcDecoder;
-import com.demo.rpc.codec.DemoRpcEncoder;
 import io.netty.bootstrap.ServerBootstrap;
 import io.netty.buffer.PooledByteBufAllocator;
 import io.netty.channel.*;
@@ -9,6 +7,8 @@
 import io.netty.channel.socket.nio.NioServerSocketChannel;
 import io.netty.handler.logging.LogLevel;
 import io.netty.handler.logging.LoggingHandler;
+import rpc.codec.DemoRpcDecoder;
+import rpc.codec.DemoRpcEncoder;
 
 public class DemoRpcServer {
 
Index: rpc-core/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>com.rpc.framework</groupId>\n        <artifactId>rpc-framework</artifactId>\n        <version>1.0-SNAPSHOT</version>\n    </parent>\n    <groupId>com.rpc.framework</groupId>\n    <artifactId>rpc-core</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/rpc-core/pom.xml b/rpc-core/pom.xml
--- a/rpc-core/pom.xml	(revision f1316da354c950b0c2b8726e82f6489e820684a5)
+++ b/rpc-core/pom.xml	(date 1693811891256)
@@ -3,6 +3,12 @@
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
     <modelVersion>4.0.0</modelVersion>
+    <dependencies>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+        </dependency>
+    </dependencies>
     <parent>
         <groupId>com.rpc.framework</groupId>
         <artifactId>rpc-framework</artifactId>
Index: rpc-core/src/main/java/rpc/transport/DemoRpcClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package rpc.transport;\n\nimport com.demo.rpc.Constants;\nimport com.demo.rpc.codec.DemoRpcDecoder;\nimport com.demo.rpc.codec.DemoRpcEncoder;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.PooledByteBufAllocator;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\nimport java.io.Closeable;\n\npublic class DemoRpcClient implements Closeable {\n\n    protected Bootstrap clientBootstrap;\n    protected EventLoopGroup group;\n    private String host;\n    private int port;\n\n    public DemoRpcClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n        // 创建并配置客户端Bootstrap\n        clientBootstrap = new Bootstrap();\n        group = NettyEventLoopFactory.eventLoopGroup(Constants.DEFAULT_IO_THREADS, \"NettyClientWorker\");\n        clientBootstrap.group(group)\n                .option(ChannelOption.TCP_NODELAY, true)\n                .option(ChannelOption.SO_KEEPALIVE, true)\n                .option(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT)\n                .channel(NioSocketChannel.class) // 创建的Channel类型\n                // 指定ChannelHandler的顺序\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) throws Exception {\n                        ch.pipeline().addLast(\"demo-rpc-encoder\", new DemoRpcEncoder());\n                        ch.pipeline().addLast(\"demo-rpc-decoder\", new DemoRpcDecoder());\n                        ch.pipeline().addLast(\"client-handler\", new DemoRpcClientHandler());\n                    }\n                });\n    }\n\n\n    public ChannelFuture connect() {\n        // 连接指定的地址和端口\n        ChannelFuture connect = clientBootstrap.connect(host, port);\n        connect.awaitUninterruptibly();\n        return connect;\n    }\n\n    @Override\n    public void close() {\n        group.shutdownGracefully();\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/rpc-core/src/main/java/rpc/transport/DemoRpcClient.java b/rpc-core/src/main/java/rpc/transport/DemoRpcClient.java
--- a/rpc-core/src/main/java/rpc/transport/DemoRpcClient.java	(revision f1316da354c950b0c2b8726e82f6489e820684a5)
+++ b/rpc-core/src/main/java/rpc/transport/DemoRpcClient.java	(date 1693811891115)
@@ -1,8 +1,6 @@
 package rpc.transport;
 
-import com.demo.rpc.Constants;
-import com.demo.rpc.codec.DemoRpcDecoder;
-import com.demo.rpc.codec.DemoRpcEncoder;
+
 import io.netty.bootstrap.Bootstrap;
 import io.netty.buffer.PooledByteBufAllocator;
 import io.netty.channel.ChannelFuture;
@@ -11,6 +9,9 @@
 import io.netty.channel.EventLoopGroup;
 import io.netty.channel.socket.SocketChannel;
 import io.netty.channel.socket.nio.NioSocketChannel;
+import rpc.Constants;
+import rpc.codec.DemoRpcDecoder;
+import rpc.codec.DemoRpcEncoder;
 
 import java.io.Closeable;
 
Index: rpc-core/src/main/src/test/java/test/Consumer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package test;\n\nimport com.demo.rpc.proxy.DemoRpcProxy;\nimport com.demo.rpc.registry.ServerInfo;\nimport com.demo.rpc.registry.ZookeeperRegistry;\n\npublic class Consumer {\n    public static void main(String[] args) throws Exception {\n        // 创建ZookeeperRegistr对象\n        ZookeeperRegistry<ServerInfo> discovery = new ZookeeperRegistry<>();\n        discovery.start();\n\n        // 创建代理对象，通过代理调用远端Server\n        DemoService demoService = DemoRpcProxy.newInstance(DemoService.class, discovery);\n        // 调用sayHello()方法，并输出结果\n        String result = demoService.sayHello(\"hello\");\n        System.out.println(result);\n        // Thread.sleep(10000000L);\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/rpc-core/src/main/src/test/java/test/Consumer.java b/rpc-core/src/main/src/test/java/test/Consumer.java
--- a/rpc-core/src/main/src/test/java/test/Consumer.java	(revision f1316da354c950b0c2b8726e82f6489e820684a5)
+++ b/rpc-core/src/main/src/test/java/test/Consumer.java	(date 1693811891127)
@@ -1,8 +1,9 @@
 package test;
 
-import com.demo.rpc.proxy.DemoRpcProxy;
-import com.demo.rpc.registry.ServerInfo;
-import com.demo.rpc.registry.ZookeeperRegistry;
+
+import rpc.proxy.DemoRpcProxy;
+import rpc.registry.ServerInfo;
+import rpc.registry.ZookeeperRegistry;
 
 public class Consumer {
     public static void main(String[] args) throws Exception {
Index: rpc-core/src/main/src/test/java/test/Provider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package test;\n\nimport com.demo.rpc.factory.BeanManager;\nimport com.demo.rpc.registry.ServerInfo;\nimport com.demo.rpc.registry.ZookeeperRegistry;\nimport com.demo.rpc.transport.DemoRpcServer;\nimport org.apache.curator.x.discovery.ServiceInstance;\n\n/**\n * Created on 2020-06-21\n */\npublic class Provider {\n    public static void main(String[] args) throws Exception {\n        // 创建DemoServiceImpl，并注册到BeanManager中\n        BeanManager.registerBean(\"demoService\", new DemoServiceImpl());\n        // 创建ZookeeperRegistry，并将Provider的地址信息封装成ServerInfo\n        // 对象注册到Zookeeper\n        ZookeeperRegistry<ServerInfo> discovery = new ZookeeperRegistry<>();\n        discovery.start();\n        ServerInfo serverInfo = new ServerInfo(\"127.0.0.1\", 20880);\n        discovery.registerService(\n                ServiceInstance.<ServerInfo>builder().name(\"demoService\").payload(serverInfo).build());\n        // 启动DemoRpcServer，等待Client的请求\n        DemoRpcServer rpcServer = new DemoRpcServer(20880);\n        rpcServer.start();\n        Thread.sleep(100000000L);\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/rpc-core/src/main/src/test/java/test/Provider.java b/rpc-core/src/main/src/test/java/test/Provider.java
--- a/rpc-core/src/main/src/test/java/test/Provider.java	(revision f1316da354c950b0c2b8726e82f6489e820684a5)
+++ b/rpc-core/src/main/src/test/java/test/Provider.java	(date 1693811891138)
@@ -1,10 +1,11 @@
 package test;
 
-import com.demo.rpc.factory.BeanManager;
-import com.demo.rpc.registry.ServerInfo;
-import com.demo.rpc.registry.ZookeeperRegistry;
-import com.demo.rpc.transport.DemoRpcServer;
+
 import org.apache.curator.x.discovery.ServiceInstance;
+import rpc.factory.BeanManager;
+import rpc.registry.ServerInfo;
+import rpc.registry.ZookeeperRegistry;
+import rpc.transport.DemoRpcServer;
 
 /**
  * Created on 2020-06-21
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"CompilerConfiguration\">\n    <annotationProcessing>\n      <profile name=\"Maven default annotation processors profile\" enabled=\"true\">\n        <sourceOutputDir name=\"target/generated-sources/annotations\" />\n        <sourceTestOutputDir name=\"target/generated-test-sources/test-annotations\" />\n        <outputRelativeToContentRoot value=\"true\" />\n        <module name=\"rpc-annotion\" />\n        <module name=\"rpc-core\" />\n      </profile>\n    </annotationProcessing>\n    <bytecodeTargetLevel>\n      <module name=\"rpc-annotion\" target=\"1.5\" />\n      <module name=\"rpc-core\" target=\"1.5\" />\n      <module name=\"rpc-framework\" target=\"1.5\" />\n    </bytecodeTargetLevel>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
--- a/.idea/compiler.xml	(revision f1316da354c950b0c2b8726e82f6489e820684a5)
+++ b/.idea/compiler.xml	(date 1693811891159)
@@ -2,6 +2,7 @@
 <project version="4">
   <component name="CompilerConfiguration">
     <annotationProcessing>
+      <profile default="true" name="Default" enabled="true" />
       <profile name="Maven default annotation processors profile" enabled="true">
         <sourceOutputDir name="target/generated-sources/annotations" />
         <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
@@ -11,9 +12,15 @@
       </profile>
     </annotationProcessing>
     <bytecodeTargetLevel>
-      <module name="rpc-annotion" target="1.5" />
-      <module name="rpc-core" target="1.5" />
-      <module name="rpc-framework" target="1.5" />
+      <module name="rpc-annotion" target="1.8" />
+      <module name="rpc-core" target="1.8" />
+      <module name="rpc-framework" target="1.8" />
     </bytecodeTargetLevel>
   </component>
+  <component name="JavacSettings">
+    <option name="ADDITIONAL_OPTIONS_OVERRIDE">
+      <module name="rpc-annotion" options="-parameters" />
+      <module name="rpc-core" options="-parameters" />
+    </option>
+  </component>
 </project>
\ No newline at end of file
Index: .idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"RemoteRepositoriesConfiguration\">\n    <remote-repository>\n      <option name=\"id\" value=\"central\" />\n      <option name=\"name\" value=\"Central Repository\" />\n      <option name=\"url\" value=\"https://repo.maven.apache.org/maven2\" />\n    </remote-repository>\n    <remote-repository>\n      <option name=\"id\" value=\"central\" />\n      <option name=\"name\" value=\"Maven Central repository\" />\n      <option name=\"url\" value=\"https://repo1.maven.org/maven2\" />\n    </remote-repository>\n    <remote-repository>\n      <option name=\"id\" value=\"jboss.community\" />\n      <option name=\"name\" value=\"JBoss Community repository\" />\n      <option name=\"url\" value=\"https://repository.jboss.org/nexus/content/repositories/public/\" />\n    </remote-repository>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/jarRepositories.xml b/.idea/jarRepositories.xml
--- a/.idea/jarRepositories.xml	(revision f1316da354c950b0c2b8726e82f6489e820684a5)
+++ b/.idea/jarRepositories.xml	(date 1693811891170)
@@ -16,5 +16,10 @@
       <option name="name" value="JBoss Community repository" />
       <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
     </remote-repository>
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="central" />
+      <option name="url" value="http://maven.huolala.cn/repository/maven-public" />
+    </remote-repository>
   </component>
 </project>
\ No newline at end of file
Index: rpc-annotion/rpc-annotion.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule=\"true\" type=\"JAVA_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\" LANGUAGE_LEVEL=\"JDK_1_5\">\n    <output url=\"file://$MODULE_DIR$/${project.build.directory}/classes\" />\n    <output-test url=\"file://$MODULE_DIR$/${project.build.directory}/test-classes\" />\n    <content url=\"file://$MODULE_DIR$\">\n      <sourceFolder url=\"file://$MODULE_DIR$/src/main/java\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/src/main/resources\" type=\"java-resource\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/src/test/java\" isTestSource=\"true\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/${project.build.directory}/classes\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/${project.build.directory}/test-classes\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/target\" />\n    </content>\n    <orderEntry type=\"inheritedJdk\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/rpc-annotion/rpc-annotion.iml b/rpc-annotion/rpc-annotion.iml
--- a/rpc-annotion/rpc-annotion.iml	(revision f1316da354c950b0c2b8726e82f6489e820684a5)
+++ b/rpc-annotion/rpc-annotion.iml	(date 1693811891305)
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_5">
-    <output url="file://$MODULE_DIR$/${project.build.directory}/classes" />
-    <output-test url="file://$MODULE_DIR$/${project.build.directory}/test-classes" />
+  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_8">
+    <output url="file://$MODULE_DIR$/target/classes" />
+    <output-test url="file://$MODULE_DIR$/target/test-classes" />
     <content url="file://$MODULE_DIR$">
       <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
@@ -13,5 +13,20 @@
     </content>
     <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" name="Maven: io.netty:netty-all:4.1.25.Final" level="project" />
+    <orderEntry type="library" name="Maven: com.caucho:hessian:4.0.38" level="project" />
+    <orderEntry type="library" name="Maven: org.xerial.snappy:snappy-java:1.1.7.5" level="project" />
+    <orderEntry type="library" name="Maven: org.apache.curator:curator-x-discovery:4.0.1" level="project" />
+    <orderEntry type="library" name="Maven: org.apache.curator:curator-recipes:4.0.1" level="project" />
+    <orderEntry type="library" name="Maven: org.apache.curator:curator-framework:4.0.1" level="project" />
+    <orderEntry type="library" name="Maven: org.apache.curator:curator-client:4.0.1" level="project" />
+    <orderEntry type="library" name="Maven: org.apache.zookeeper:zookeeper:3.5.3-beta" level="project" />
+    <orderEntry type="library" name="Maven: commons-cli:commons-cli:1.2" level="project" />
+    <orderEntry type="library" name="Maven: log4j:log4j:1.2.17" level="project" />
+    <orderEntry type="library" name="Maven: io.netty:netty:3.10.5.Final" level="project" />
+    <orderEntry type="library" name="Maven: com.google.guava:guava:20.0" level="project" />
+    <orderEntry type="library" name="Maven: org.slf4j:slf4j-api:1.7.25" level="project" />
+    <orderEntry type="library" name="Maven: org.codehaus.jackson:jackson-mapper-asl:1.9.13" level="project" />
+    <orderEntry type="library" name="Maven: org.codehaus.jackson:jackson-core-asl:1.9.13" level="project" />
   </component>
 </module>
\ No newline at end of file
Index: rpc-core/rpc-core.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule=\"true\" type=\"JAVA_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\" LANGUAGE_LEVEL=\"JDK_1_5\">\n    <output url=\"file://$MODULE_DIR$/${project.build.directory}/classes\" />\n    <output-test url=\"file://$MODULE_DIR$/${project.build.directory}/test-classes\" />\n    <content url=\"file://$MODULE_DIR$\">\n      <sourceFolder url=\"file://$MODULE_DIR$/src/main/java\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/src/main/resources\" type=\"java-resource\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/src/test/java\" isTestSource=\"true\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/${project.build.directory}/classes\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/${project.build.directory}/test-classes\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/target\" />\n    </content>\n    <orderEntry type=\"jdk\" jdkName=\"1.8\" jdkType=\"JavaSDK\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/rpc-core/rpc-core.iml b/rpc-core/rpc-core.iml
--- a/rpc-core/rpc-core.iml	(revision f1316da354c950b0c2b8726e82f6489e820684a5)
+++ b/rpc-core/rpc-core.iml	(date 1693811891315)
@@ -1,17 +1,39 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_5">
-    <output url="file://$MODULE_DIR$/${project.build.directory}/classes" />
-    <output-test url="file://$MODULE_DIR$/${project.build.directory}/test-classes" />
+  <component name="CheckStyle-IDEA-Module">
+    <option name="configuration">
+      <map />
+    </option>
+  </component>
+  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_8">
+    <output url="file://$MODULE_DIR$/target/classes" />
+    <output-test url="file://$MODULE_DIR$/target/test-classes" />
     <content url="file://$MODULE_DIR$">
       <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/src/test/java" isTestSource="true" />
       <excludeFolder url="file://$MODULE_DIR$/${project.build.directory}/classes" />
       <excludeFolder url="file://$MODULE_DIR$/${project.build.directory}/test-classes" />
       <excludeFolder url="file://$MODULE_DIR$/target" />
     </content>
     <orderEntry type="jdk" jdkName="1.8" jdkType="JavaSDK" />
     <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" name="Maven: org.projectlombok:lombok:1.16.22" level="project" />
+    <orderEntry type="library" name="Maven: io.netty:netty-all:4.1.25.Final" level="project" />
+    <orderEntry type="library" name="Maven: com.caucho:hessian:4.0.38" level="project" />
+    <orderEntry type="library" name="Maven: org.xerial.snappy:snappy-java:1.1.7.5" level="project" />
+    <orderEntry type="library" name="Maven: org.apache.curator:curator-x-discovery:4.0.1" level="project" />
+    <orderEntry type="library" name="Maven: org.apache.curator:curator-recipes:4.0.1" level="project" />
+    <orderEntry type="library" name="Maven: org.apache.curator:curator-framework:4.0.1" level="project" />
+    <orderEntry type="library" name="Maven: org.apache.curator:curator-client:4.0.1" level="project" />
+    <orderEntry type="library" name="Maven: org.apache.zookeeper:zookeeper:3.5.3-beta" level="project" />
+    <orderEntry type="library" name="Maven: commons-cli:commons-cli:1.2" level="project" />
+    <orderEntry type="library" name="Maven: log4j:log4j:1.2.17" level="project" />
+    <orderEntry type="library" name="Maven: io.netty:netty:3.10.5.Final" level="project" />
+    <orderEntry type="library" name="Maven: com.google.guava:guava:20.0" level="project" />
+    <orderEntry type="library" name="Maven: org.slf4j:slf4j-api:1.7.25" level="project" />
+    <orderEntry type="library" name="Maven: org.codehaus.jackson:jackson-mapper-asl:1.9.13" level="project" />
+    <orderEntry type="library" name="Maven: org.codehaus.jackson:jackson-core-asl:1.9.13" level="project" />
   </component>
 </module>
\ No newline at end of file
Index: .idea/rpc-framework.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule=\"true\" type=\"JAVA_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\" LANGUAGE_LEVEL=\"JDK_1_5\">\n    <output url=\"file://$MODULE_DIR$/${project.build.directory}/classes\" />\n    <output-test url=\"file://$MODULE_DIR$/${project.build.directory}/test-classes\" />\n    <content url=\"file://$MODULE_DIR$\">\n      <excludeFolder url=\"file://$MODULE_DIR$/${project.build.directory}/classes\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/${project.build.directory}/test-classes\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/target\" />\n    </content>\n    <orderEntry type=\"inheritedJdk\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/rpc-framework.iml b/.idea/rpc-framework.iml
--- a/.idea/rpc-framework.iml	(revision f1316da354c950b0c2b8726e82f6489e820684a5)
+++ b/.idea/rpc-framework.iml	(date 1693811891327)
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_5">
-    <output url="file://$MODULE_DIR$/${project.build.directory}/classes" />
-    <output-test url="file://$MODULE_DIR$/${project.build.directory}/test-classes" />
+  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_8">
+    <output url="file://$MODULE_DIR$/target/classes" />
+    <output-test url="file://$MODULE_DIR$/target/test-classes" />
     <content url="file://$MODULE_DIR$">
       <excludeFolder url="file://$MODULE_DIR$/${project.build.directory}/classes" />
       <excludeFolder url="file://$MODULE_DIR$/${project.build.directory}/test-classes" />
@@ -10,5 +10,20 @@
     </content>
     <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" name="Maven: io.netty:netty-all:4.1.25.Final" level="project" />
+    <orderEntry type="library" name="Maven: com.caucho:hessian:4.0.38" level="project" />
+    <orderEntry type="library" name="Maven: org.xerial.snappy:snappy-java:1.1.7.5" level="project" />
+    <orderEntry type="library" name="Maven: org.apache.curator:curator-x-discovery:4.0.1" level="project" />
+    <orderEntry type="library" name="Maven: org.apache.curator:curator-recipes:4.0.1" level="project" />
+    <orderEntry type="library" name="Maven: org.apache.curator:curator-framework:4.0.1" level="project" />
+    <orderEntry type="library" name="Maven: org.apache.curator:curator-client:4.0.1" level="project" />
+    <orderEntry type="library" name="Maven: org.apache.zookeeper:zookeeper:3.5.3-beta" level="project" />
+    <orderEntry type="library" name="Maven: commons-cli:commons-cli:1.2" level="project" />
+    <orderEntry type="library" name="Maven: log4j:log4j:1.2.17" level="project" />
+    <orderEntry type="library" name="Maven: io.netty:netty:3.10.5.Final" level="project" />
+    <orderEntry type="library" name="Maven: com.google.guava:guava:20.0" level="project" />
+    <orderEntry type="library" name="Maven: org.slf4j:slf4j-api:1.7.25" level="project" />
+    <orderEntry type="library" name="Maven: org.codehaus.jackson:jackson-mapper-asl:1.9.13" level="project" />
+    <orderEntry type="library" name="Maven: org.codehaus.jackson:jackson-core-asl:1.9.13" level="project" />
   </component>
 </module>
\ No newline at end of file
Index: .idea/libraries/Maven__org_apache_curator_curator_x_discovery_4_0_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_apache_curator_curator_x_discovery_4_0_1.xml b/.idea/libraries/Maven__org_apache_curator_curator_x_discovery_4_0_1.xml
new file mode 100644
--- /dev/null	(date 1693811891471)
+++ b/.idea/libraries/Maven__org_apache_curator_curator_x_discovery_4_0_1.xml	(date 1693811891471)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.apache.curator:curator-x-discovery:4.0.1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/curator/curator-x-discovery/4.0.1/curator-x-discovery-4.0.1.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/curator/curator-x-discovery/4.0.1/curator-x-discovery-4.0.1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/curator/curator-x-discovery/4.0.1/curator-x-discovery-4.0.1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_apache_curator_curator_recipes_4_0_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_apache_curator_curator_recipes_4_0_1.xml b/.idea/libraries/Maven__org_apache_curator_curator_recipes_4_0_1.xml
new file mode 100644
--- /dev/null	(date 1693811891461)
+++ b/.idea/libraries/Maven__org_apache_curator_curator_recipes_4_0_1.xml	(date 1693811891461)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.apache.curator:curator-recipes:4.0.1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/curator/curator-recipes/4.0.1/curator-recipes-4.0.1.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/curator/curator-recipes/4.0.1/curator-recipes-4.0.1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/curator/curator-recipes/4.0.1/curator-recipes-4.0.1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_codehaus_jackson_jackson_core_asl_1_9_13.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_codehaus_jackson_jackson_core_asl_1_9_13.xml b/.idea/libraries/Maven__org_codehaus_jackson_jackson_core_asl_1_9_13.xml
new file mode 100644
--- /dev/null	(date 1693811891452)
+++ b/.idea/libraries/Maven__org_codehaus_jackson_jackson_core_asl_1_9_13.xml	(date 1693811891452)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.codehaus.jackson:jackson-core-asl:1.9.13">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/codehaus/jackson/jackson-core-asl/1.9.13/jackson-core-asl-1.9.13.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/codehaus/jackson/jackson-core-asl/1.9.13/jackson-core-asl-1.9.13-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/codehaus/jackson/jackson-core-asl/1.9.13/jackson-core-asl-1.9.13-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_apache_zookeeper_zookeeper_3_5_3_beta.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_apache_zookeeper_zookeeper_3_5_3_beta.xml b/.idea/libraries/Maven__org_apache_zookeeper_zookeeper_3_5_3_beta.xml
new file mode 100644
--- /dev/null	(date 1693811891440)
+++ b/.idea/libraries/Maven__org_apache_zookeeper_zookeeper_3_5_3_beta.xml	(date 1693811891440)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.apache.zookeeper:zookeeper:3.5.3-beta">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/zookeeper/zookeeper/3.5.3-beta/zookeeper-3.5.3-beta.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/zookeeper/zookeeper/3.5.3-beta/zookeeper-3.5.3-beta-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/zookeeper/zookeeper/3.5.3-beta/zookeeper-3.5.3-beta-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__log4j_log4j_1_2_17.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__log4j_log4j_1_2_17.xml b/.idea/libraries/Maven__log4j_log4j_1_2_17.xml
new file mode 100644
--- /dev/null	(date 1693811891424)
+++ b/.idea/libraries/Maven__log4j_log4j_1_2_17.xml	(date 1693811891424)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: log4j:log4j:1.2.17">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/log4j/log4j/1.2.17/log4j-1.2.17.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/log4j/log4j/1.2.17/log4j-1.2.17-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/log4j/log4j/1.2.17/log4j-1.2.17-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_codehaus_jackson_jackson_mapper_asl_1_9_13.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_codehaus_jackson_jackson_mapper_asl_1_9_13.xml b/.idea/libraries/Maven__org_codehaus_jackson_jackson_mapper_asl_1_9_13.xml
new file mode 100644
--- /dev/null	(date 1693811891216)
+++ b/.idea/libraries/Maven__org_codehaus_jackson_jackson_mapper_asl_1_9_13.xml	(date 1693811891216)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.codehaus.jackson:jackson-mapper-asl:1.9.13">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/codehaus/jackson/jackson-mapper-asl/1.9.13/jackson-mapper-asl-1.9.13.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/codehaus/jackson/jackson-mapper-asl/1.9.13/jackson-mapper-asl-1.9.13-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/codehaus/jackson/jackson-mapper-asl/1.9.13/jackson-mapper-asl-1.9.13-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/encodings.xml b/.idea/encodings.xml
new file mode 100644
--- /dev/null	(date 1693811891205)
+++ b/.idea/encodings.xml	(date 1693811891205)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="file://$PROJECT_DIR$/rpc-core/src/main/java" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/libraries/Maven__org_xerial_snappy_snappy_java_1_1_7_5.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_xerial_snappy_snappy_java_1_1_7_5.xml b/.idea/libraries/Maven__org_xerial_snappy_snappy_java_1_1_7_5.xml
new file mode 100644
--- /dev/null	(date 1693811891190)
+++ b/.idea/libraries/Maven__org_xerial_snappy_snappy_java_1_1_7_5.xml	(date 1693811891190)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.xerial.snappy:snappy-java:1.1.7.5">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/xerial/snappy/snappy-java/1.1.7.5/snappy-java-1.1.7.5.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/xerial/snappy/snappy-java/1.1.7.5/snappy-java-1.1.7.5-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/xerial/snappy/snappy-java/1.1.7.5/snappy-java-1.1.7.5-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_projectlombok_lombok_1_16_22.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_projectlombok_lombok_1_16_22.xml b/.idea/libraries/Maven__org_projectlombok_lombok_1_16_22.xml
new file mode 100644
--- /dev/null	(date 1693811891148)
+++ b/.idea/libraries/Maven__org_projectlombok_lombok_1_16_22.xml	(date 1693811891148)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.projectlombok:lombok:1.16.22">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/projectlombok/lombok/1.16.22/lombok-1.16.22.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/projectlombok/lombok/1.16.22/lombok-1.16.22-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/projectlombok/lombok/1.16.22/lombok-1.16.22-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__io_netty_netty_all_4_1_25_Final.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__io_netty_netty_all_4_1_25_Final.xml b/.idea/libraries/Maven__io_netty_netty_all_4_1_25_Final.xml
new file mode 100644
--- /dev/null	(date 1693811891413)
+++ b/.idea/libraries/Maven__io_netty_netty_all_4_1_25_Final.xml	(date 1693811891413)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: io.netty:netty-all:4.1.25.Final">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/io/netty/netty-all/4.1.25.Final/netty-all-4.1.25.Final.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/io/netty/netty-all/4.1.25.Final/netty-all-4.1.25.Final-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/io/netty/netty-all/4.1.25.Final/netty-all-4.1.25.Final-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_apache_curator_curator_framework_4_0_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_apache_curator_curator_framework_4_0_1.xml b/.idea/libraries/Maven__org_apache_curator_curator_framework_4_0_1.xml
new file mode 100644
--- /dev/null	(date 1693811891404)
+++ b/.idea/libraries/Maven__org_apache_curator_curator_framework_4_0_1.xml	(date 1693811891404)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.apache.curator:curator-framework:4.0.1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/curator/curator-framework/4.0.1/curator-framework-4.0.1.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/curator/curator-framework/4.0.1/curator-framework-4.0.1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/curator/curator-framework/4.0.1/curator-framework-4.0.1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_apache_curator_curator_client_4_0_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_apache_curator_curator_client_4_0_1.xml b/.idea/libraries/Maven__org_apache_curator_curator_client_4_0_1.xml
new file mode 100644
--- /dev/null	(date 1693811891393)
+++ b/.idea/libraries/Maven__org_apache_curator_curator_client_4_0_1.xml	(date 1693811891393)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.apache.curator:curator-client:4.0.1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/curator/curator-client/4.0.1/curator-client-4.0.1.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/curator/curator-client/4.0.1/curator-client-4.0.1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/curator/curator-client/4.0.1/curator-client-4.0.1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__com_google_guava_guava_20_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__com_google_guava_guava_20_0.xml b/.idea/libraries/Maven__com_google_guava_guava_20_0.xml
new file mode 100644
--- /dev/null	(date 1693811891382)
+++ b/.idea/libraries/Maven__com_google_guava_guava_20_0.xml	(date 1693811891382)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: com.google.guava:guava:20.0">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/google/guava/guava/20.0/guava-20.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/com/google/guava/guava/20.0/guava-20.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/google/guava/guava/20.0/guava-20.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__com_caucho_hessian_4_0_38.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__com_caucho_hessian_4_0_38.xml b/.idea/libraries/Maven__com_caucho_hessian_4_0_38.xml
new file mode 100644
--- /dev/null	(date 1693811891372)
+++ b/.idea/libraries/Maven__com_caucho_hessian_4_0_38.xml	(date 1693811891372)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: com.caucho:hessian:4.0.38">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/caucho/hessian/4.0.38/hessian-4.0.38.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/com/caucho/hessian/4.0.38/hessian-4.0.38-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/caucho/hessian/4.0.38/hessian-4.0.38-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"MavenProjectsManager\">\n    <option name=\"originalFiles\">\n      <list>\n        <option value=\"$PROJECT_DIR$/rpc-annotion/pom.xml\" />\n        <option value=\"$PROJECT_DIR$/rpc-core/pom.xml\" />\n        <option value=\"$PROJECT_DIR$/rpc-annotion/src/pom.xml\" />\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" default=\"true\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/out\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision f1316da354c950b0c2b8726e82f6489e820684a5)
+++ b/.idea/misc.xml	(date 1693811891482)
@@ -10,6 +10,9 @@
       </list>
     </option>
   </component>
+  <component name="PDMPlugin">
+    <option name="skipTestSources" value="false" />
+  </component>
   <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
Index: .idea/libraries/Maven__io_netty_netty_3_10_5_Final.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__io_netty_netty_3_10_5_Final.xml b/.idea/libraries/Maven__io_netty_netty_3_10_5_Final.xml
new file mode 100644
--- /dev/null	(date 1693811891348)
+++ b/.idea/libraries/Maven__io_netty_netty_3_10_5_Final.xml	(date 1693811891348)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: io.netty:netty:3.10.5.Final">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/io/netty/netty/3.10.5.Final/netty-3.10.5.Final.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/io/netty/netty/3.10.5.Final/netty-3.10.5.Final-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/io/netty/netty/3.10.5.Final/netty-3.10.5.Final-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__commons_cli_commons_cli_1_2.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__commons_cli_commons_cli_1_2.xml b/.idea/libraries/Maven__commons_cli_commons_cli_1_2.xml
new file mode 100644
--- /dev/null	(date 1693811891337)
+++ b/.idea/libraries/Maven__commons_cli_commons_cli_1_2.xml	(date 1693811891337)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: commons-cli:commons-cli:1.2">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/commons-cli/commons-cli/1.2/commons-cli-1.2.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/commons-cli/commons-cli/1.2/commons-cli-1.2-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/commons-cli/commons-cli/1.2/commons-cli-1.2-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_slf4j_slf4j_api_1_7_25.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_slf4j_slf4j_api_1_7_25.xml b/.idea/libraries/Maven__org_slf4j_slf4j_api_1_7_25.xml
new file mode 100644
--- /dev/null	(date 1693811891231)
+++ b/.idea/libraries/Maven__org_slf4j_slf4j_api_1_7_25.xml	(date 1693811891231)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.slf4j:slf4j-api:1.7.25">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
